const logger = require('./logger.js');

/**
 * X·ª≠ l√Ω l·ªói khi bot thi·∫øu quy·ªÅn v√† tr·∫£ v·ªÅ tin nh·∫Øn text thay v√¨ embed
 * @param {Object} interaction - Discord interaction object ho·∫∑c message object
 * @param {string} permission - T√™n quy·ªÅn b·ªã thi·∫øu (v√≠ d·ª•: 'embedLinks', 'sendMessages')
 * @param {string} username - T√™n user ƒë·ªÉ hi·ªÉn th·ªã trong tin nh·∫Øn
 * @param {string} action - H√†nh ƒë·ªông ƒëang th·ª±c hi·ªán (reply, editReply, followUp)
 * @returns {Promise<void>}
 */
async function handlePermissionError(interaction, permission, username, action = 'reply') {
  try {
    const errorMessage = `üö´ | ${username}, bot kh√¥ng c√≥ quy·ªÅn \`${permission}\`! Vui l√≤ng th√™m quy·ªÅn n√†y cho bot ho·∫∑c li√™n h·ªá qu·∫£n tr·ªã vi√™n m√°y ch·ªß ƒë·ªÉ ƒë∆∞·ª£c h·ªó tr·ª£.`;
    
    switch (action) {
      case 'reply':
        if (interaction.reply) {
          await interaction.reply(errorMessage);
        } else if (interaction.channel) {
          await interaction.channel.send(errorMessage);
        }
        break;
        
      case 'editReply':
        if (interaction.editReply) {
          await interaction.editReply(errorMessage);
        } else if (interaction.edit) {
          await interaction.edit(errorMessage);
        }
        break;
        
      case 'followUp':
        if (interaction.followUp) {
          await interaction.followUp({ content: errorMessage });
        } else if (interaction.channel) {
          await interaction.channel.send(errorMessage);
        }
        break;
        
      case 'update':
        if (interaction.update) {
          await interaction.update({ content: errorMessage });
        } else if (interaction.editReply) {
          await interaction.editReply(errorMessage);
        } else if (interaction.reply) {
          await interaction.reply(errorMessage);
        } else if (interaction.channel) {
          await interaction.channel.send(errorMessage);
        }
        break;
        
      default:
        if (interaction.reply) {
          await interaction.reply(errorMessage);
        } else if (interaction.channel) {
          await interaction.channel.send(errorMessage);
        }
    }

    logger.warn('PERMISSION', `Bot thi·∫øu quy·ªÅn ${permission} trong guild ${interaction.guild?.id || 'DM'}`);
  } catch (error) {
    logger.error('PERMISSION', `L·ªói khi x·ª≠ l√Ω permission error:`, error);
  }
}

/**
 * Wrapper function ƒë·ªÉ g·ª≠i embed v·ªõi fallback khi thi·∫øu quy·ªÅn
 * @param {Object} interaction - Discord interaction object ho·∫∑c message object
 * @param {Object} embedData - D·ªØ li·ªáu embed c·∫ßn g·ª≠i
 * @param {string} username - T√™n user
 * @param {string} permission - Quy·ªÅn c·∫ßn ki·ªÉm tra (m·∫∑c ƒë·ªãnh: 'embedLinks')
 * @param {string} action - H√†nh ƒë·ªông ƒëang th·ª±c hi·ªán (reply, editReply, followUp)
 * @returns {Promise<boolean>} - true n·∫øu g·ª≠i th√†nh c√¥ng, false n·∫øu thi·∫øu quy·ªÅn
 */
async function sendEmbedWithFallback(interaction, embedData, username, permission = 'embedLinks', action = 'reply') {
  try {
    // Th·ª≠ g·ª≠i embed
    switch (action) {
      case 'reply':
        if (interaction.reply) {
          await interaction.reply(embedData);
        } else if (interaction.channel) {
          await interaction.channel.send(embedData);
        }
        break;
        
      case 'editReply':
        if (interaction.editReply) {
          await interaction.editReply(embedData);
        } else if (interaction.edit) {
          await interaction.edit(embedData);
        }
        break;
        
      case 'followUp':
        if (interaction.followUp) {
          await interaction.followUp(embedData);
        } else if (interaction.channel) {
          await interaction.channel.send(embedData);
        }
        break;
        
      case 'update':
        if (interaction.update) {
          await interaction.update(embedData);
        } else if (interaction.editReply) {
          await interaction.editReply(embedData);
        } else if (interaction.reply) {
          await interaction.reply(embedData);
        } else if (interaction.channel) {
          await interaction.channel.send(embedData);
        }
        break;
        
      default:
        if (interaction.reply) {
          await interaction.reply(embedData);
        } else if (interaction.channel) {
          await interaction.channel.send(embedData);
        }
    }
    
    return true;
  } catch (error) {
    // N·∫øu l·ªói do thi·∫øu quy·ªÅn, g·ª≠i tin nh·∫Øn text thay th·∫ø
    if (error.code === 50013 || error.message.includes('permission')) {
      await handlePermissionError(interaction, permission, username, action);
      return false;
    }
    
    // N·∫øu l·ªói kh√°c, throw l·∫°i
    throw error;
  }
}

/**
 * Ki·ªÉm tra quy·ªÅn c·ªßa bot trong guild
 * @param {Object} interaction - Discord interaction object ho·∫∑c message object
 * @param {string} permission - Quy·ªÅn c·∫ßn ki·ªÉm tra
 * @returns {boolean} - true n·∫øu c√≥ quy·ªÅn, false n·∫øu kh√¥ng
 */
function hasPermission(interaction, permission) {
  if (!interaction.guild) return true; // DM kh√¥ng c·∫ßn ki·ªÉm tra quy·ªÅn
  
  const botMember = interaction.guild.members.me;
  if (!botMember) return false;
  
  return botMember.permissions.has(permission);
}

module.exports = {
  handlePermissionError,
  sendEmbedWithFallback,
  hasPermission
};
