const NeuralNetworks = require('../services/NeuralNetworks');
const mongoClient = require('../services/mongoClient.js');
const storageDB = require('../services/storagedb.js');
const initSystem = require('../services/initSystem.js');
const ProfileDB = require('../services/profiledb.js');
const GuildProfileDB = require('../services/guildprofiledb.js');
const ownerService = require('../services/ownerService.js');
// const { initDashboard } = require('./dashboard.js');
// const messageMonitor = require('../services/messageMonitor.js');
const logger = require('../utils/logger.js');
const AutoUpdateService = require('../services/AutoUpdateService');

async function startbot(client, loadCommands) {
  client.once('clientReady', async () => {
    logger.info('SYSTEM', `\n\n
    ‚ñà‚ñà‚ïó     ‚ñà‚ñà‚ïó   ‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ïó   ‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó
    ‚ñà‚ñà‚ïë     ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ñà‚ñà‚ïó ‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïë
    ‚ñà‚ñà‚ïë     ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë‚ïö‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïë
    ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïë ‚ïö‚ñà‚ñà‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë
    ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù ‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïê‚ïê‚ïù‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù
    `);

    try {
      logger.info('SYSTEM', 'Kh·ªüi ch·∫°y Luna Bot...');
      
      const autoUpdateService = new AutoUpdateService();
      const currentVersion = autoUpdateService.getCurrentVersion();
      logger.info('SYSTEM', `Version hi·ªán t·∫°i: v${currentVersion}`);
      
      const hasUpdate = await autoUpdateService.checkAndUpdate();
      
      if (hasUpdate) {
        return;
      }
      
      logger.info('SYSTEM', 'Ti·∫øp t·ª•c kh·ªüi ƒë·ªông bot...');
      
    } catch (error) {
      logger.error('SYSTEM', `L·ªói khi auto-update:`, error);
      logger.info('SYSTEM', `Ti·∫øp t·ª•c kh·ªüi ƒë·ªông bot b√¨nh th∆∞·ªùng do l·ªói auto-update`);
    }

    try {
      logger.info('SYSTEM', `ƒêang k·∫øt n·ªëi ƒë·∫øn MongoDB...`);
      await mongoClient.connect();
      await storageDB.setupCollections();
      initSystem.markReady('mongodb');
      logger.info('SYSTEM', `ƒê√£ k·∫øt n·ªëi th√†nh c√¥ng ƒë·∫øn MongoDB!`);
    } catch (error) {
      logger.error('SYSTEM', 'L·ªói khi kh·ªüi t·∫°o k·∫øt n·ªëi MongoDB:', error);
      initSystem.markReady('mongodb');
      logger.warn('SYSTEM', 'Bot s·∫Ω ho·∫°t ƒë·ªông m√† kh√¥ng c√≥ kh·∫£ nƒÉng l∆∞u tr·ªØ l√¢u d√†i. M·ªôt s·ªë t√≠nh nƒÉng c√≥ th·ªÉ kh√¥ng ho·∫°t ƒë·ªông ch√≠nh x√°c.');
    }

    try {
      await storageDB.initializeConversationHistory();
      logger.info('SYSTEM', 'ƒê√£ kh·ªüi t·∫°o c·∫•u tr√∫c l·ªãch s·ª≠ cu·ªôc tr√≤ chuy·ªán');
      initSystem.markReady('conversationHistory');
    } catch (error) {
      logger.error('SYSTEM', 'L·ªói khi kh·ªüi t·∫°o c·∫•u tr√∫c l·ªãch s·ª≠ cu·ªôc tr√≤ chuy·ªán:', error);
      initSystem.markReady('conversationHistory');
    }

    try {
      logger.info('SYSTEM', 'ƒêang kh·ªüi t·∫°o h·ªá th·ªëng profile ng∆∞·ªùi d√πng...');
      await storageDB.initializeProfiles();

      const profileCollection = await ProfileDB.getProfileCollection();
      logger.info('SYSTEM', 'ƒê√£ thi·∫øt l·∫≠p collection user_profiles v√† c·∫•u tr√∫c d·ªØ li·ªáu');

      const db = mongoClient.getDb();
      await db.collection('user_profiles').createIndex({ 'data.global_xp': -1 });
      await db.collection('user_profiles').createIndex({ 'data.xp.id': 1 });
      logger.info('SYSTEM', 'ƒê√£ kh·ªüi t·∫°o c√°c index cho collection user_profiles');

      initSystem.markReady('profiles');
    } catch (error) {
      logger.error('SYSTEM', 'L·ªói khi kh·ªüi t·∫°o h·ªá th·ªëng profile ng∆∞·ªùi d√πng:', error);
      initSystem.markReady('profiles');
    }

    try {
      logger.info('SYSTEM', 'ƒêang kh·ªüi t·∫°o h·ªá th·ªëng profile guild...');
      await GuildProfileDB.setupGuildProfileIndexes();

      for (const [guildId, guild] of client.guilds.cache) {
        try {
          const guildProfile = await GuildProfileDB.getGuildProfile(guildId);
          logger.info('SYSTEM', `ƒê√£ t·∫£i c·∫•u h√¨nh XP cho guild ${guild.name}`);
        } catch (err) {
          logger.error('SYSTEM', `L·ªói khi t·∫£i c·∫•u h√¨nh guild ${guild.name}:`, err);
        }
      }

      logger.info('SYSTEM', 'ƒê√£ kh·ªüi t·∫°o h·ªá th·ªëng profile guild');
      initSystem.markReady('guildProfiles');
    } catch (error) {
      logger.error('SYSTEM', 'L·ªói khi kh·ªüi t·∫°o h·ªá th·ªëng profile guild:', error);
      initSystem.markReady('guildProfiles');
    }

    try {
      logger.info('SYSTEM', 'ƒêang kh·ªüi t·∫°o OwnerService...');
      ownerService.initialize(client);
      logger.info('SYSTEM', 'ƒê√£ kh·ªüi t·∫°o OwnerService th√†nh c√¥ng!');
    } catch (error) {
      logger.error('SYSTEM', 'L·ªói khi kh·ªüi t·∫°o OwnerService:', error);
    }

    try {
      const commandCount = loadCommands(client);
      logger.info('SYSTEM', `ƒê√£ t·∫£i t·ªïng c·ªông ${commandCount} l·ªánh!`);
      initSystem.markReady('commands');
    } catch (error) {
      logger.error('SYSTEM', 'L·ªói khi t·∫£i commands:', error);
      initSystem.markReady('commands');
    }

    /**
    try {
      const connected = await NeuralNetworks.testConnection();
      initSystem.markReady('api');
    } catch (error) {
      logger.error('SYSTEM', 'L·ªói khi k·∫øt n·ªëi ƒë·∫øn X.AI API:', error);
      initSystem.markReady('api');
    }
    */

    // T·∫†M TH·ªúI V√î HI·ªÜU H√ìA H·ªÜ TH·ªêNG GI√ÅM S√ÅT TIN NH·∫ÆN
    /**
    try {
      // Kh·ªüi t·∫°o h·ªá th·ªëng gi√°m s√°t tin nh·∫Øn
      console.log('üîç ƒêang kh·ªüi t·∫°o h·ªá th·ªëng gi√°m s√°t tin nh·∫Øn...');
      await messageMonitor.initialize(client);
      console.log('‚úÖ ƒê√£ kh·ªüi t·∫°o h·ªá th·ªëng gi√°m s√°t tin nh·∫Øn');
      initSystem.markReady('messageMonitor');
    } catch (error) {
      logger.error('SYSTEM', '‚ùå L·ªói khi kh·ªüi t·∫°o h·ªá th·ªëng gi√°m s√°t tin nh·∫Øn:', error);
      initSystem.markReady('messageMonitor');
    }
    */

    // Kh·ªüi t·∫°o Dashboard
    /** 
    try {
      logger.info('SYSTEM', 'ƒêang kh·ªüi t·∫°o Web Dashboard...');
      const dashboard = await initDashboard(client);
      if (dashboard) {
        logger.info('SYSTEM', 'ƒê√£ kh·ªüi t·∫°o Web Dashboard th√†nh c√¥ng!');
      }
      initSystem.markReady('dashboard');
    } catch (error) {
      logger.error('SYSTEM', 'L·ªói khi kh·ªüi t·∫°o Web Dashboard:', error);
      initSystem.markReady('dashboard');
    }
    */

    // Thi·∫øt l·∫≠p tr·∫°ng th√°i cho bot
    client.user.setPresence({
      activities: [{ name: 'Kh√¥ng ph·∫£i ng∆∞·ªùi | @Luna', type: 4 }],
      status: 'online'
    });

    logger.info('SYSTEM', `Bot ƒë√£ s·∫µn s√†ng! ƒê√£ ƒëƒÉng nh·∫≠p v·ªõi t√™n ${client.user.tag}`);
  });
}

module.exports = { startbot };
