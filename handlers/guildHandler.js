const { REST, Routes } = require('discord.js');
const mongoClient = require('../services/mongoClient.js');
const initSystem = require('../services/initSystem.js');
const { getCommandsJson, loadCommands } = require('./commandHandler');
const logger = require('../utils/logger.js');

/**
 * L∆∞u th√¥ng tin guild v√†o MongoDB
 * @param {Discord.Guild} guild - Guild c·∫ßn l∆∞u th√¥ng tin
 */
async function storeGuildInDB(guild) {
  try {
    const db = await mongoClient.getDbSafe();

    // Chu·∫©n b·ªã d·ªØ li·ªáu guild ƒë·ªÉ l∆∞u tr·ªØ
    const guildData = {
      guildId: guild.id,
      name: guild.name,
      memberCount: guild.memberCount,
      ownerID: guild.ownerId,
      icon: guild.iconURL(),
      joinedAt: new Date(),
      settings: {
        welcomeChannel: null,
        moderationEnabled: true,
        autoRoles: []
      },
      // Th√™m c·∫•u h√¨nh XP m·∫∑c ƒë·ªãnh cho guild
      xp: {
        isActive: true,
        exceptions: []
      }
    };

    // Upsert guild v√†o c∆° s·ªü d·ªØ li·ªáu (th√™m m·ªõi ho·∫∑c c·∫≠p nh·∫≠t n·∫øu ƒë√£ t·ªìn t·∫°i)
    await db.collection('guilds').updateOne(
      { guildId: guild.id },
      { $set: guildData },
      { upsert: true }
    );

    // L∆∞u c·∫•u h√¨nh XP v√†o client.guildProfiles ƒë·ªÉ s·ª≠ d·ª•ng ·ªü memory
    if (guild.client && guild.client.guildProfiles) {
      guild.client.guildProfiles.set(guild.id, {
        xp: guildData.xp
      });
      logger.info('GUILD', `ƒê√£ l∆∞u c·∫•u h√¨nh XP cho guild ${guild.name} v√†o b·ªô nh·ªõ`);
    }

    logger.info('GUILD', `ƒê√£ l∆∞u th√¥ng tin server ${guild.name} v√†o MongoDB`);
  } catch (error) {
    logger.error('GUILD', `L·ªói khi l∆∞u th√¥ng tin guild v√†o MongoDB:`, error);
  }
}

/**
 * X√≥a th√¥ng tin guild kh·ªèi MongoDB
 * @param {string} guildId - ID c·ªßa guild c·∫ßn x√≥a
 */
async function removeGuildFromDB(guildId) {
  try {
    const db = await mongoClient.getDbSafe();

    // X√≥a th√¥ng tin guild t·ª´ c∆° s·ªü d·ªØ li·ªáu
    await db.collection('guilds').deleteOne({ guildId: guildId });
    logger.info('GUILD', `ƒê√£ x√≥a th√¥ng tin server ID: ${guildId} kh·ªèi MongoDB`);
  } catch (error) {
    logger.error('GUILD', `L·ªói khi x√≥a guild t·ª´ MongoDB:`, error);
  }
}

/**
 * L·∫•y th√¥ng tin guild t·ª´ MongoDB
 * @param {string} guildId - ID c·ªßa guild c·∫ßn l·∫•y th√¥ng tin
 */
async function getGuildFromDB(guildId) {
  try {
    const db = await mongoClient.getDbSafe();

    // L·∫•y th√¥ng tin guild t·ª´ c∆° s·ªü d·ªØ li·ªáu
    const guildData = await db.collection('guilds').findOne({ guildId: guildId });

    return guildData;
  } catch (error) {
    logger.error('GUILD', `L·ªói khi l·∫•y th√¥ng tin guild t·ª´ MongoDB:`, error);
    return null;
  }
}

/**
 * C·∫≠p nh·∫≠t c√†i ƒë·∫∑t guild trong MongoDB
 * @param {string} guildId - ID c·ªßa guild c·∫ßn c·∫≠p nh·∫≠t
 * @param {Object} settings - ƒê·ªëi t∆∞·ª£ng ch·ª©a c√†i ƒë·∫∑t c·∫ßn c·∫≠p nh·∫≠t
 */
async function updateGuildSettings(guildId, settings) {
  try {
    const db = await mongoClient.getDbSafe();

    // C·∫≠p nh·∫≠t c√†i ƒë·∫∑t guild trong c∆° s·ªü d·ªØ li·ªáu
    await db.collection('guilds').updateOne(
      { guildId: guildId },
      { $set: { settings: settings } }
    );

    logger.info('GUILD', `ƒê√£ c·∫≠p nh·∫≠t c√†i ƒë·∫∑t cho server ID: ${guildId}`);
    return true;
  } catch (error) {
    logger.error('GUILD', `L·ªói khi c·∫≠p nh·∫≠t c√†i ƒë·∫∑t guild:`, error);
    return false;
  }
}

/**
 * X·ª≠ l√Ω s·ª± ki·ªán khi bot tham gia m·ªôt guild m·ªõi
 * @param {Discord.Guild} guild - Guild m·ªõi m√† bot v·ª´a tham gia
 */
async function handleGuildJoin(guild, commands) {
  logger.info('GUILD', `Bot ƒë√£ ƒë∆∞·ª£c th√™m v√†o server m·ªõi: ${guild.name} (id: ${guild.id})`);
  logger.info('GUILD', `Server hi·ªán c√≥ ${guild.memberCount} th√†nh vi√™n`);

  try {
    // L∆∞u th√¥ng tin guild v√†o MongoDB
    await storeGuildInDB(guild);

    // ƒê·∫£m b·∫£o r·∫±ng commands kh√¥ng r·ªóng
    let commandsToRegister = commands;
    if (!commandsToRegister || !commandsToRegister.length) {
      // N·∫øu kh√¥ng c√≥ commands ƒë∆∞·ª£c truy·ªÅn v√†o, l·∫•y t·ª´ commandHandler
      commandsToRegister = getCommandsJson(guild.client);

      // N·∫øu v·∫´n kh√¥ng c√≥ l·ªánh, hi·ªÉn th·ªã c·∫£nh b√°o
      if (!commandsToRegister || !commandsToRegister.length) {
        logger.warn('GUILD', `Kh√¥ng c√≥ l·ªánh n√†o ƒë∆∞·ª£c t·∫£i ƒë·ªÉ tri·ªÉn khai cho server ${guild.name}!`);
        commandsToRegister = [];
      }
    }

    // Tri·ªÉn khai slash commands cho guild m·ªõi
    await deployCommandsToGuild(guild.id, commandsToRegister, client);
    logger.info('GUILD', `ƒê√£ tri·ªÉn khai c√°c l·ªánh slash cho server: ${guild.name}`);

    // Th√¥ng b√°o cho ch·ªß s·ªü h·ªØu server ho·∫∑c k√™nh m·∫∑c ƒë·ªãnh n·∫øu c√≥ th·ªÉ
    const defaultChannel = findDefaultChannel(guild);
    if (defaultChannel) {
      await defaultChannel.send({
        content: `üëã Xin ch√†o! Luna ƒë√£ s·∫µn s√†ng h·ªó tr·ª£ server **${guild.name}**!\n` +
          `üîç T·∫•t c·∫£ c√°c l·ªánh slash ƒë√£ ƒë∆∞·ª£c t·ª± ƒë·ªông c√†i ƒë·∫∑t.\n` +
          `üí¨ B·∫°n c√≥ th·ªÉ chat v·ªõi m√¨nh b·∫±ng c√°ch @mention Luna ho·∫∑c s·ª≠ d·ª•ng c√°c l·ªánh slash.\n` +
          `‚ú® C·∫£m ∆°n ƒë√£ th√™m m√¨nh v√†o server!`
      });
    }
  } catch (error) {
    logger.error('GUILD', `L·ªói khi x·ª≠ l√Ω guild m·ªõi:`, error);
  }
}

/**
 * X·ª≠ l√Ω s·ª± ki·ªán khi bot r·ªùi kh·ªèi m·ªôt guild
 * @param {Discord.Guild} guild - Guild m√† bot v·ª´a r·ªùi kh·ªèi
 */
function handleGuildLeave(guild) {
  logger.info('GUILD', `Bot ƒë√£ r·ªùi kh·ªèi server: ${guild.name} (id: ${guild.id})`);

  // X√≥a th√¥ng tin guild kh·ªèi MongoDB
  removeGuildFromDB(guild.id);
}

async function deployCommandsToGuild(guildId, existingCommands = null, client = null) {
 try {
   const token = process.env.DISCORD_TOKEN;
   const clientId = process.env.CLIENT_ID;

    logger.debug('GUILD', `Checking env variables - CLIENT_ID: ${clientId ? 'OK' : 'MISSING'}, TOKEN: ${token ? 'OK' : 'MISSING'}`);

    if (!token) {
      throw new Error('DISCORD_TOKEN kh√¥ng ƒë∆∞·ª£c thi·∫øt l·∫≠p trong bi·∫øn m√¥i tr∆∞·ªùng');
    }

    if (!clientId) {
      throw new Error('CLIENT_ID kh√¥ng ƒë∆∞·ª£c thi·∫øt l·∫≠p trong bi·∫øn m√¥i tr∆∞·ªùng');
    }

    const rest = new REST({ version: '10' }).setToken(token);

    const commands = existingCommands || getCommandsJson(client);

    logger.info('GUILD', `CHU·∫®N B·ªä DEPLOY L·ªÜNH CHO GUILD ${guildId}`);
    
    if (!commands || commands.length === 0) {
      logger.warn('GUILD', `Kh√¥ng c√≥ l·ªánh n√†o ƒë·ªÉ tri·ªÉn khai cho guild ID: ${guildId}`);
      return [];
    }

    logger.info('GUILD', `S·ªë l∆∞·ª£ng l·ªánh chu·∫©n b·ªã deploy: ${commands.length}`);
    logger.info('GUILD', `Danh s√°ch l·ªánh: ${commands.map(c => c.name).join(', ')}`);
    
    if (process.env.NODE_ENV === 'development') {
      logger.debug('GUILD', 'Chi ti·∫øt c√°c l·ªánh s·∫Ω deploy:');
      commands.forEach((cmd, index) => {
        logger.debug('GUILD', `  ${index + 1}. ${cmd.name}: ${JSON.stringify(cmd, null, 2)}`);
      });
    }

    logger.info('GUILD', `ƒêang g·ª≠i request deploy t·ªõi Discord API...`);
    
    const startTime = Date.now();
    
    const data = await rest.put(
      Routes.applicationGuildCommands(clientId, guildId),
      { body: commands }
    );
    
    const duration = Date.now() - startTime;

    logger.info('GUILD', `DEPLOY TH√ÄNH C√îNG cho guild ${guildId} trong ${duration}ms`);
    logger.info('GUILD', `Discord ƒë√£ x√°c nh·∫≠n ${data.length} l·ªánh ƒë∆∞·ª£c ƒëƒÉng k√Ω`);
    
    if (data.length !== commands.length) {
      logger.warn('GUILD', `S·ªë l·ªánh deploy (${commands.length}) kh√°c v·ªõi s·ªë l·ªánh Discord x√°c nh·∫≠n (${data.length})`);
    }
    
    logger.info('GUILD', `L·ªánh ƒë√£ ƒë∆∞·ª£c Discord x√°c nh·∫≠n: ${data.map(c => c.name).join(', ')}`);
    
    return data;
    
  } catch (error) {
    logger.error('GUILD', `L·ªñI KHI DEPLOY L·ªÜNH CHO GUILD ${guildId}:`);
    logger.error('GUILD', `Error Type: ${error.constructor.name}`);
    logger.error('GUILD', `Error Message: ${error.message}`);
    
    if (error.code) {
      logger.error('GUILD', `Discord Error Code: ${error.code}`);
    }
    
    if (error.status) {
      logger.error('GUILD', `HTTP Status: ${error.status}`);
    }
    
    if (error.rawError) {
      logger.error('GUILD', `Raw Error:`, JSON.stringify(error.rawError, null, 2));
    }
    
    logger.error('GUILD', `Stack Trace:`, error.stack);
    
    throw error;
  }
}

/**
* X·ª≠ l√Ω s·ª± ki·ªán khi bot tham gia m·ªôt guild m·ªõi
* @param {Discord.Guild} guild - Guild m·ªõi m√† bot v·ª´a tham gia
*/
async function handleGuildJoin(guild, commands) {
  logger.info('GUILD', `BOT THAM GIA GUILD M·ªöI`);
  logger.info('GUILD', `Guild Name: ${guild.name}`);
  logger.info('GUILD', `Guild ID: ${guild.id}`);
  logger.info('GUILD', `Member Count: ${guild.memberCount}`);
  logger.info('GUILD', `Owner ID: ${guild.ownerId}`);

  try {
    logger.info('GUILD', `ƒêang l∆∞u th√¥ng tin guild v√†o MongoDB...`);
    await storeGuildInDB(guild);
    logger.info('GUILD', `ƒê√£ l∆∞u th√¥ng tin guild v√†o MongoDB`);

    let commandsToRegister = commands;
    if (!commandsToRegister || !commandsToRegister.length) {
      logger.warn('GUILD', `Commands param r·ªóng, ƒëang l·∫•y t·ª´ commandHandler...`);
      
      commandsToRegister = getCommandsJson(guild.client);

      if (!commandsToRegister || !commandsToRegister.length) {
        logger.error('GUILD', `KH√îNG C√ì L·ªÜNH N√ÄO ƒê·ªÇ TRI·ªÇN KHAI cho server ${guild.name}!`);
        commandsToRegister = [];
        return;
      }
    }

    logger.info('GUILD', `ƒêang tri·ªÉn khai ${commandsToRegister.length} l·ªánh cho guild ${guild.name}...`);
    await deployCommandsToGuild(guild.id, commandsToRegister, client);
    logger.info('GUILD', `ƒê√£ tri·ªÉn khai c√°c l·ªánh slash cho server: ${guild.name}`);

    const defaultChannel = findDefaultChannel(guild);
    if (defaultChannel) {
      logger.info('GUILD', `ƒêang g·ª≠i th√¥ng b√°o ch√†o t·ªõi k√™nh: ${defaultChannel.name}`);
      await defaultChannel.send({
        content: `Xin ch√†o! Luna ƒë√£ s·∫µn s√†ng h·ªó tr·ª£ server **${guild.name}**!\n` +
                 `T·∫•t c·∫£ c√°c l·ªánh slash ƒë√£ ƒë∆∞·ª£c t·ª± ƒë·ªông c√†i ƒë·∫∑t.\n` +
                 `B·∫°n c√≥ th·ªÉ chat v·ªõi m√¨nh b·∫±ng c√°ch @mention Luna ho·∫∑c s·ª≠ d·ª•ng c√°c l·ªánh slash.\n` +
                 `C·∫£m ∆°n ƒë√£ th√™m m√¨nh v√†o server!`
      });
      logger.info('GUILD', `ƒê√£ g·ª≠i th√¥ng b√°o ch√†o`);
    } else {
      logger.warn('GUILD', `Kh√¥ng t√¨m th·∫•y k√™nh ph√π h·ª£p ƒë·ªÉ g·ª≠i th√¥ng b√°o ch√†o`);
    }
  } catch (error) {
    logger.error('GUILD', `L·ªñI KHI X·ª¨ L√ù GUILD M·ªöI ${guild.name}:`, error);
  }
}

/**
* Thi·∫øt l·∫≠p x·ª≠ l√Ω s·ª± ki·ªán guild cho client
* @param {Discord.Client} client - Discord client c·∫ßn thi·∫øt l·∫≠p
* @param {Array} commands - M·∫£ng c√°c l·ªánh ƒë√£ t·∫£i (t√πy ch·ªçn)
*/
async function setupGuildHandlers(client, commands = null) {
  logger.info('GUILD', '=== THI·∫æT L·∫¨P GUILD HANDLERS ===');
  
  try {
    logger.info('GUILD', 'ƒêang ch·ªù MongoDB s·∫µn s√†ng...');
    await mongoClient.getDbSafe();
    logger.info('GUILD', '‚úì MongoDB ƒë√£ s·∫µn s√†ng');

    // T·∫£i l·ªánh n·∫øu ch∆∞a ƒë∆∞·ª£c t·∫£i
    if (!commands && (!client.commands || client.commands.size === 0)) {
      logger.info('GUILD', 'ƒêang t·∫£i l·ªánh t·ª´ th∆∞ m·ª•c commands...');
      loadCommands(client);
    }

    // ƒêƒÉng k√Ω event handlers
    client.on('guildCreate', guild => handleGuildJoin(guild, commands));
    logger.info('GUILD', '‚úì ƒê√£ ƒëƒÉng k√Ω event handler: guildCreate');

    client.on('guildDelete', guild => handleGuildLeave(guild));
    logger.info('GUILD', '‚úì ƒê√£ ƒëƒÉng k√Ω event handler: guildDelete');

    // ƒê·ªìng b·ªô t·∫•t c·∫£ guild hi·ªán t·∫°i v√†o MongoDB v√† tri·ªÉn khai l·ªánh
    logger.info('GUILD', '=== B·∫ÆT ƒê·∫¶U ƒê·ªíNG B·ªò V√Ä DEPLOY CHO T·∫§T C·∫¢ GUILDS ===');
    const guilds = client.guilds.cache;
    logger.info('GUILD', `T·ªïng s·ªë guild: ${guilds.size}`);
    
    if (guilds.size === 0) {
      logger.warn('GUILD', 'KH√îNG C√ì GUILD N√ÄO! Bot ch∆∞a ƒë∆∞·ª£c th√™m v√†o server n√†o.');
      return;
    }
    
    let syncCount = 0;
    let deployCount = 0;
    let deployErrors = 0;

    // L·∫•y danh s√°ch l·ªánh t·ª´ commandHandler
    const commandsToRegister = commands || getCommandsJson(client);

    if (!commandsToRegister || commandsToRegister.length === 0) {
      logger.error('GUILD', '‚ùå KH√îNG C√ì L·ªÜNH N√ÄO ƒê·ªÇ TRI·ªÇN KHAI!');
      logger.error('GUILD', 'Ki·ªÉm tra l·∫°i th∆∞ m·ª•c commands v√† file l·ªánh');
      return;
    } else {
      logger.info('GUILD', `‚úì ƒê√£ t·∫£i ${commandsToRegister.length} l·ªánh ƒë·ªÉ tri·ªÉn khai`);
      logger.info('GUILD', `Danh s√°ch: ${commandsToRegister.map(c => c.name).join(', ')}`);
    }

    // Deploy cho t·ª´ng guild
    for (const guild of guilds.values()) {
      logger.info('GUILD', `--- Processing guild: ${guild.name} (${guild.id}) ---`);
      
      // L∆∞u th√¥ng tin guild v√†o MongoDB
      try {
        await storeGuildInDB(guild);
        syncCount++;
        logger.info('GUILD', `‚úì [${syncCount}/${guilds.size}] Synced: ${guild.name}`);
      } catch (error) {
        logger.error('GUILD', `‚ùå L·ªói sync guild ${guild.name}:`, error);
      }

      // Tri·ªÉn khai l·ªánh cho guild
      try {
        await deployCommandsToGuild(guild.id, commandsToRegister, client);
        deployCount++;
        logger.info('GUILD', `‚úì [${deployCount}/${guilds.size}] Deployed commands: ${guild.name}`);
        
        // Th√™m delay nh·ªè ƒë·ªÉ tr√°nh rate limit
        await new Promise(resolve => setTimeout(resolve, 1000));
        
      } catch (error) {
        deployErrors++;
        logger.error('GUILD', `‚ùå [${deployErrors} errors] L·ªói deploy cho guild ${guild.name}:`, error.message);
      }
    }

    logger.info('GUILD', '=== K·∫æT QU·∫¢ ƒê·ªíNG B·ªò ===');
    logger.info('GUILD', `MongoDB Sync: ${syncCount}/${guilds.size} guilds`);
    logger.info('GUILD', `Commands Deploy: ${deployCount}/${guilds.size} guilds`);
    
    if (deployErrors > 0) {
      logger.warn('GUILD', `‚ö†Ô∏è C√≥ ${deployErrors} guilds deploy th·∫•t b·∫°i`);
    } else {
      logger.info('GUILD', `‚úì T·∫§T C·∫¢ GUILDS DEPLOY TH√ÄNH C√îNG!`);
    }

  } catch (error) {
    logger.error('GUILD', '‚ùå L·ªñI NGHI√äM TR·ªåNG KHI THI·∫æT L·∫¨P GUILD HANDLERS:', error);
    throw error; // N√©m l·ªói ra ngo√†i ƒë·ªÉ catch ·ªü ready.js
  }
}

module.exports = {
  handleGuildJoin,
  handleGuildLeave,
  deployCommandsToGuild,
  setupGuildHandlers,
  getGuildFromDB,
  updateGuildSettings,
  storeGuildInDB
};
