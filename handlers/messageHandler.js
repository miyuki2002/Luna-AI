const { EmbedBuilder, AttachmentBuilder } = require('discord.js');
const ConversationService = require('../services/ConversationService');
const ImageService = require('../services/ImageService');
const AICore = require('../services/AICore');
const experience = require('../utils/xp');
const logger = require('../utils/logger.js');

/**
 * X·ª≠ l√Ω tin nh·∫Øn Discord ƒë·ªÅ c·∫≠p ƒë·∫øn bot
 * @param {Object} message - ƒê·ªëi t∆∞·ª£ng tin nh·∫Øn Discord
 */
async function handleMessage(message) {
  try {
    // Bi·∫øn ƒë·ªÉ ki·ªÉm tra xem l·ªánh c√≥ ƒë∆∞·ª£c th·ª±c thi hay kh√¥ng
    let commandExecuted = false;

    const content = message.content
      .replace(/<@!?\d+>/g, '')
      .trim();

    if (!content) {
      await message.reply('T√¥i c√≥ th·ªÉ gi√∫p g√¨ cho b·∫°n h√¥m nay?');
      return;
    }

    if (content.toLowerCase().includes('code') ||
      content.toLowerCase().includes('function') ||
      content.toLowerCase().includes('write a')) {
      await handleCodeRequest(message, content);
      commandExecuted = true;
      return;
    }

    await handleChatRequest(message, content);

    if (message.guild) {
      processXp(message, commandExecuted, true);
    }
  } catch (error) {
    logger.error('MESSAGE', `L·ªói khi x·ª≠ l√Ω tin nh·∫Øn t·ª´ ${message.author.tag}:`, error);
    await message.reply('Xin l·ªói, t√¥i g·∫∑p l·ªói khi x·ª≠ l√Ω y√™u c·∫ßu c·ªßa b·∫°n.');

    if (message.guild) {
      processXp(message, false, false);
    }
  }
}

/**
 * X·ª≠ l√Ω h·ªá th·ªëng XP cho ng∆∞·ªùi d√πng
 * @param {Object} message - ƒê·ªëi t∆∞·ª£ng tin nh·∫Øn t·ª´ Discord.js
 * @param {Boolean} commandExecuted - C√≥ l·ªánh n√†o ƒë∆∞·ª£c th·ª±c thi kh√¥ng
 * @param {Boolean} execute - C√≥ n√™n ti·∫øp t·ª•c th·ª±c thi kh√¥ng
 */
async function processXp(message, commandExecuted, execute) {
  try {
    const response = await experience(message, commandExecuted, execute);

    // Ghi log l·ªói kh√¥ng g√¢y ra b·ªüi l√Ω do ƒë√£ bi·∫øt
    if (!response.xpAdded && ![
      'DISABLED',             // XP b·ªã t·∫Øt, c·∫ßn EXPERIENCE_POINTS trong client#features
      'COMMAND_EXECUTED',     // L·ªánh ƒë√£ ƒë∆∞·ª£c th·ª±c thi th√†nh c√¥ng
      'COMMAND_TERMINATED',   // L·ªánh ƒë√£ ƒë∆∞·ª£c t√¨m nh∆∞ng ƒë√£ b·ªã ch·∫•m d·ª©t
      'DM_CHANNEL',           // Tin nh·∫Øn ƒë∆∞·ª£c g·ª≠i trong DM
      'GUILD_SETTINGS_NOT_FOUND', // Kh√¥ng t√¨m th·∫•y c√†i ƒë·∫∑t c·ªßa guild
      'DISABLED_ON_GUILD',    // XP b·ªã t·∫Øt tr√™n server n√†y
      'DISABLED_ON_CHANNEL',  // Tin nh·∫Øn ƒë∆∞·ª£c g·ª≠i trong k√™nh b·ªã ch·∫∑n XP
      'RECENTLY_TALKED'       // Ng∆∞·ªùi g·ª≠i v·ª´a n√≥i g·∫ßn ƒë√¢y
    ].includes(response.reason)) {
      // Ghi log l·ªói n·∫øu c√≥
      logger.error('XP', `L·ªói XP: ${response.reason} t·∫°i ${message.guild.id}<${message.guild.name}> b·ªüi ${message.author.tag}<${message.author.id}> l√∫c ${new Date()}`);
    }

    // N·∫øu ng∆∞·ªùi d√πng l√™n c·∫•p, c√≥ th·ªÉ hi·ªÉn th·ªã th√¥ng b√°o
    if (response.xpAdded && response.level && response.previousLevel && response.level > response.previousLevel) {
      // T√πy ch·ªçn: Th√¥ng b√°o ng∆∞·ªùi d√πng ƒë√£ l√™n c·∫•p
      logger.info('XP', `${message.author.tag} ƒë√£ l√™n c·∫•p ${response.level} trong server ${message.guild.name}`);

      // T√πy ch·ªçn: G·ª≠i th√¥ng b√°o l√™n c·∫•p trong k√™nh
      // await message.channel.send(`üéâ Ch√∫c m·ª´ng ${message.author}! B·∫°n ƒë√£ ƒë·∫°t c·∫•p ƒë·ªô ${response.level}!`);
    }
  } catch (error) {
    logger.error('XP', 'L·ªói khi x·ª≠ l√Ω XP:', error);
  }
}

/**
 * X·ª≠ l√Ω y√™u c·∫ßu tr√≤ chuy·ªán th√¥ng th∆∞·ªùng
 * @param {Object} message - ƒê·ªëi t∆∞·ª£ng tin nh·∫Øn Discord
 * @param {string} content - N·ªôi dung tin nh·∫Øn ƒë√£ x·ª≠ l√Ω
 */
async function handleChatRequest(message, content) {
  await message.channel.sendTyping();

  try {
    // Ki·ªÉm tra gi·ªõi h·∫°n token tr∆∞·ªõc khi x·ª≠ l√Ω
    const TokenService = require('../services/TokenService.js');
    const userId = message.author.id;
    const tokenCheck = await TokenService.canUseTokens(userId, 2000); // ∆Ø·ªõc t√≠nh 2000 tokens

    if (!tokenCheck.allowed) {
      const roleNames = {
        user: 'Ng∆∞·ªùi d√πng',
        helper: 'Helper',
        admin: 'Admin',
        owner: 'Owner'
      };
      
      await message.reply(
        `**Gi·ªõi h·∫°n Token**\n\n` +
        `B·∫°n ƒë√£ s·ª≠ d·ª•ng h·∫øt gi·ªõi h·∫°n token h√†ng ng√†y!\n\n` +
        `**Th√¥ng tin:**\n` +
        `‚Ä¢ Vai tr√≤: ${roleNames[tokenCheck.role] || tokenCheck.role}\n` +
        `‚Ä¢ ƒê√£ s·ª≠ d·ª•ng: ${tokenCheck.current.toLocaleString()} tokens\n` +
        `‚Ä¢ Gi·ªõi h·∫°n: ${tokenCheck.limit.toLocaleString()} tokens/ng√†y\n` +
        `‚Ä¢ C√≤n l·∫°i: ${tokenCheck.remaining.toLocaleString()} tokens\n\n` +
        `Gi·ªõi h·∫°n s·∫Ω ƒë∆∞·ª£c reset v√†o ng√†y mai. Vui l√≤ng quay l·∫°i sau!`
      );
      return;
    }

    const response = await ConversationService.getCompletion(content, message);

    // Chia ph·∫£n h·ªìi n·∫øu n√≥ qu√° d√†i cho Discord
    if (response.length > 2000) {
      const chunks = splitMessageRespectWords(response, 2000);
      for (const chunk of chunks) {
        await message.reply(chunk);
      }
    } else {
      await message.reply(response);
    }
  } catch (error) {
    logger.error('MESSAGE', `L·ªói khi nh·∫≠n ph·∫£n h·ªìi tr√≤ chuy·ªán cho ${message.author.tag}:`, error);

    if (error.code === 'EPROTO' || error.code === 'ECONNREFUSED' || error.message.includes('connect')) {
      await message.reply('Xin l·ªói, t√¥i ƒëang g·∫∑p v·∫•n ƒë·ªÅ x·ª≠ l√Ω y√™u c·∫ßu c·ªßa b·∫°n. Vui l√≤ng th·ª≠ l·∫°i sau ho·∫∑c li√™n h·ªá qu·∫£n tr·ªã vi√™n ƒë·ªÉ ƒë∆∞·ª£c h·ªó tr·ª£.');
    } else {
      await message.reply('Xin l·ªói, t√¥i g·∫∑p kh√≥ khƒÉn khi t·∫°o ph·∫£n h·ªìi. Vui l√≤ng th·ª≠ l·∫°i sau.');
    }
  }
}

/**
 * X·ª≠ l√Ω y√™u c·∫ßu t·∫°o h√¨nh ·∫£nh
 */
async function handleImageGeneration(message, prompt) {
  if (!prompt) {
    await message.reply('Vui l√≤ng cung c·∫•p m√¥ t·∫£ cho h√¨nh ·∫£nh b·∫°n mu·ªën t√¥i t·∫°o.');
    return;
  }

  await message.channel.sendTyping();

  try {
    const imageResult = await ImageService.generateImage(prompt);

    if (typeof imageResult === 'string') {
      await message.reply(imageResult);
      return;
    }

    const attachment = new AttachmentBuilder(imageResult.buffer, { name: 'generated-image.png' });

    const embed = new EmbedBuilder()
      .setTitle('H√¨nh ·∫¢nh ƒê∆∞·ª£c T·∫°o')
      .setDescription(`M√¥ t·∫£: ${prompt}`)
      .setColor('#0099ff')
      .setTimestamp();

    await message.reply({ 
      embeds: [embed],
      files: [attachment]
    });
  } catch (error) {
    logger.error('IMAGE', 'L·ªói khi t·∫°o h√¨nh ·∫£nh:', error);
    await message.reply('Xin l·ªói, t√¥i g·∫∑p kh√≥ khƒÉn khi t·∫°o h√¨nh ·∫£nh ƒë√≥.');
  }
}

/**
 * X·ª≠ l√Ω y√™u c·∫ßu v·ªÅ m√£
 * @param {Object} message - ƒê·ªëi t∆∞·ª£ng tin nh·∫Øn Discord
 * @param {string} prompt - N·ªôi dung tin nh·∫Øn ƒë√£ x·ª≠ l√Ω
 */
async function handleCodeRequest(message, prompt) {
  await message.channel.sendTyping();

  try {
    // Ki·ªÉm tra gi·ªõi h·∫°n token tr∆∞·ªõc khi x·ª≠ l√Ω
    const TokenService = require('../services/TokenService.js');
    const userId = message.author.id;
    const tokenCheck = await TokenService.canUseTokens(userId, 4000); // Code requests th∆∞·ªùng d√πng nhi·ªÅu tokens h∆°n

    if (!tokenCheck.allowed) {
      const roleNames = {
        user: 'Ng∆∞·ªùi d√πng',
        helper: 'Helper',
        admin: 'Admin',
        owner: 'Owner'
      };
      
      await message.reply(
        `**Gi·ªõi h·∫°n Token**\n\n` +
        `B·∫°n ƒë√£ s·ª≠ d·ª•ng h·∫øt gi·ªõi h·∫°n token h√†ng ng√†y!\n\n` +
        `**Th√¥ng tin:**\n` +
        `‚Ä¢ Vai tr√≤: ${roleNames[tokenCheck.role] || tokenCheck.role}\n` +
        `‚Ä¢ ƒê√£ s·ª≠ d·ª•ng: ${tokenCheck.current.toLocaleString()} tokens\n` +
        `‚Ä¢ Gi·ªõi h·∫°n: ${tokenCheck.limit.toLocaleString()} tokens/ng√†y\n` +
        `‚Ä¢ C√≤n l·∫°i: ${tokenCheck.remaining.toLocaleString()} tokens\n\n` +
        `Gi·ªõi h·∫°n s·∫Ω ƒë∆∞·ª£c reset v√†o ng√†y mai. Vui l√≤ng quay l·∫°i sau!`
      );
      return;
    }

    const result = await AICore.getCodeCompletion(prompt, message);
    let formattedResponse = result.content || result;

    // Ghi nh·∫≠n token usage n·∫øu c√≥
    if (result.usage && result.usage.total_tokens) {
      await TokenService.recordTokenUsage(userId, result.usage.total_tokens, 'code');
    }

    if (!formattedResponse.includes('```')) {
      formattedResponse = formatCodeResponse(formattedResponse);
    }

    // Chia ph·∫£n h·ªìi n·∫øu n√≥ qu√° d√†i cho Discord
    if (formattedResponse.length > 2000) {
      const chunks = splitMessage(formattedResponse, 2000);
      for (const chunk of chunks) {
        await message.reply(chunk);
      }
    } else {
      await message.reply(formattedResponse);
    }
  } catch (error) {
    logger.error('CODE', `L·ªói khi nh·∫≠n m√£ cho ${message.author.tag}:`, error);
    await message.reply('Xin l·ªói, t√¥i g·∫∑p kh√≥ khƒÉn khi t·∫°o m√£ ƒë√≥.');
  }
}

/**
 * ƒê·ªãnh d·∫°ng ph·∫£n h·ªìi d∆∞·ªõi d·∫°ng kh·ªëi m√£ n·∫øu n√≥ ch∆∞a ƒë∆∞·ª£c ƒë·ªãnh d·∫°ng
 */
function formatCodeResponse(text) {
  let language = 'javascript';

  // C√°c m·∫´u ng√¥n ng·ªØ ph·ªï bi·∫øn
  const langPatterns = {
    python: /import\s+[\w.]+|def\s+\w+\s*\(|print\s*\(/i,
    javascript: /const|let|var|function|=>|\bif\s*\(|console\.log/i,
    java: /public\s+class|void\s+main|System\.out|import\s+java/i,
    html: /<html|<div|<body|<head|<!DOCTYPE/i,
    css: /body\s*{|margin:|padding:|color:|@media/i,
    php: /<\?php|\$\w+\s*=/i
  };

  // Ph√°t hi·ªán ng√¥n ng·ªØ
  for (const [lang, pattern] of Object.entries(langPatterns)) {
    if (pattern.test(text)) {
      language = lang;
      break;
    }
  }

  return `\`\`\`${language}\n${text}\n\`\`\``;
}

/**
 * Chia tin nh·∫Øn th√†nh c√°c ph·∫ßn nh·ªè h∆°n
 */
function splitMessage(text, maxLength = 2000) {
  const chunks = [];

  if (text.includes('```')) {
    const parts = text.split(/(```(?:\w+)?\n[\s\S]*?```)/g);

    let currentChunk = '';

    for (const part of parts) {
      if (currentChunk.length + part.length > maxLength) {
        chunks.push(currentChunk);
        currentChunk = part;
      } else {
        currentChunk += part;
      }
    }

    if (currentChunk) {
      chunks.push(currentChunk);
    }
  } else {
    for (let i = 0; i < text.length; i += maxLength) {
      chunks.push(text.substring(i, i + maxLength));
    }
  }

  return chunks;
}

/**
 * Chia tin nh·∫Øn th√†nh c√°c ph·∫ßn nh·ªè h∆°n, t√¥n tr·ªçng ranh gi·ªõi t·ª´
 * ƒë·ªÉ kh√¥ng c·∫Øt t·ª´ gi·ªØa ch·ª´ng
 */
function splitMessageRespectWords(text, maxLength = 2000) {
  const chunks = [];

  if (text.includes('```')) {
    const parts = text.split(/(```(?:\w+)?\n[\s\S]*?```)/g);

    let currentChunk = '';

    for (const part of parts) {
      if (currentChunk.length + part.length > maxLength) {
        chunks.push(currentChunk);
        currentChunk = part;
      } else {
        currentChunk += part;
      }
    }

    if (currentChunk) {
      chunks.push(currentChunk);
    }
  } else {
    let startPos = 0;

    while (startPos < text.length) {
      if (startPos + maxLength >= text.length) {
        chunks.push(text.substring(startPos));
        break;
      }

      let endPos = startPos + maxLength;
      while (endPos > startPos && text[endPos] !== ' ' && text[endPos] !== '\n') {
        endPos--;
      }

      if (endPos === startPos) {
        endPos = startPos + maxLength;
      } else {
        endPos++;
      }

      chunks.push(text.substring(startPos, endPos));
      startPos = endPos;
    }
  }

  return chunks;
}

/**
 * H√†m ch√≠nh x·ª≠ l√Ω s·ª± ki·ªán MessageCreate khi bot ƒë∆∞·ª£c ƒë·ªÅ c·∫≠p
 * @param {import('discord.js').Message} message - ƒê·ªëi t∆∞·ª£ng tin nh·∫Øn Discord
 * @param {import('discord.js').Client} client - Client Discord.js
 */
async function handleMentionMessage(message, client) {
  if (message.author.bot) return;

  if (message.mentions.has(client.user)) {
    const hasEveryoneOrRoleMention = message.mentions.everyone || message.mentions.roles.size > 0;

    const isMonitorWarning = message.content.includes('**C·∫¢NH B√ÅO') ||
                            message.content.includes('**L∆∞u √Ω') ||
                            message.content.includes('**C·∫¢NH B√ÅO NGH√äM TR·ªåNG');

    if (!isMonitorWarning && !hasEveryoneOrRoleMention) {
      logger.info('CHAT', `X·ª≠ l√Ω tin nh·∫Øn tr√≤ chuy·ªán t·ª´ ${message.author.tag} (ID: ${message.author.id})`);
      logger.info('CHAT', `K√™nh: ${message.channel.type === 'DM' ? 'DM' : message.channel.name} trong ${message.guild ? message.guild.name : 'DM'}`);
      logger.info('CHAT', `N·ªôi dung: ${message.content.substring(0, 50)}${message.content.length > 50 ? '...' : ''}`);
      
      try {
        await handleMessage(message); 
        logger.info('CHAT', `ƒê√£ x·ª≠ l√Ω tin nh·∫Øn tr√≤ chuy·ªán th√†nh c√¥ng cho ${message.author.tag}`);
      } catch (error) {
        logger.error('CHAT', `L·ªói khi x·ª≠ l√Ω tin nh·∫Øn tr√≤ chuy·ªán t·ª´ ${message.author.tag}:`, error);
        await message.reply('Xin l·ªói, ƒë√£ c√≥ l·ªói x·∫£y ra khi x·ª≠ l√Ω y√™u c·∫ßu c·ªßa b·∫°n. Vui l√≤ng th·ª≠ l·∫°i sau.');
      }
    } else if (hasEveryoneOrRoleMention) {
      logger.debug('CHAT', `B·ªè qua tin nh·∫Øn c√≥ mention @everyone ho·∫∑c @role t·ª´ ${message.author.tag}`);
    } else if (isMonitorWarning) {
      logger.debug('CHAT', `B·ªè qua tin nh·∫Øn c·∫£nh b√°o t·ª´ monitor t·ª´ ${message.author.tag}`);
    }
  }
}

module.exports = {
  handleMessage,
  handleMentionMessage,
  processXp,
  splitMessage,
  splitMessageRespectWords
};
