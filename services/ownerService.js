const logger = require("../utils/logger.js");
const neuralNetworks = require("./NeuralNetworks.js");
const prompts = require("../config/prompts.js");

class OwnerService {
  constructor() {
    this.ownerId = process.env.OWNER_ID;
    this.ownerInfo = null;
    this.client = null;
  }

  /**
   * Kh·ªüi t·∫°o service v·ªõi Discord client
   * @param {Client} client - Discord client
   */
  initialize(client) {
    this.client = client;
    this.loadOwnerInfo();
  }

  /**
   * T·∫£i th√¥ng tin owner t·ª´ Discord API
   */
  async loadOwnerInfo() {
    if (!this.ownerId || !this.client) {
      logger.warn(
        "OWNER",
        "OWNER_ID kh√¥ng ƒë∆∞·ª£c thi·∫øt l·∫≠p ho·∫∑c client ch∆∞a s·∫µn s√†ng"
      );
      return;
    }

    try {
      const owner = await this.client.users.fetch(this.ownerId);
      this.ownerInfo = {
        id: owner.id,
        username: owner.username,
        displayName: owner.displayName || owner.username,
        tag: owner.tag,
        avatar: owner.displayAvatarURL({ dynamic: true, size: 512 }),
      };

      logger.info(
        "OWNER",
        `ƒê√£ t·∫£i th√¥ng tin owner: ${this.ownerInfo.username} (${this.ownerInfo.id})`
      );
    } catch (error) {
      logger.error("OWNER", "L·ªói khi t·∫£i th√¥ng tin owner:", error);
    }
  }

  /**
   * Ki·ªÉm tra xem user ID c√≥ ph·∫£i l√† owner kh√¥ng
   * @param {string} userId - ID c·ªßa user c·∫ßn ki·ªÉm tra
   * @returns {boolean}
   */
  isOwner(userId) {
    return userId === this.ownerId;
  }

  /**
   * L·∫•y th√¥ng tin owner
   * @returns {Object|null}
   */
  getOwnerInfo() {
    return this.ownerInfo;
  }

  /**
   * Ki·ªÉm tra xem tin nh·∫Øn c√≥ nh·∫Øc ƒë·∫øn owner kh√¥ng (b·∫±ng ID ho·∫∑c username)
   * @param {string} content - N·ªôi dung tin nh·∫Øn
   * @param {Object} message - ƒê·ªëi t∆∞·ª£ng tin nh·∫Øn Discord (ƒë·ªÉ ki·ªÉm tra mentions)
   * @returns {boolean}
   */
  isOwnerMentioned(content, message = null) {
    if (!this.ownerInfo) return false;

    // Ki·ªÉm tra mention tr·ª±c ti·∫øp qua Discord
    if (
      message &&
      message.mentions &&
      message.mentions.users.has(this.ownerId)
    ) {
      return true;
    }

    // Ki·ªÉm tra mention b·∫±ng ID trong text
    const idMentionRegex = new RegExp(`<@!?${this.ownerId}>`, "i");
    if (idMentionRegex.test(content)) {
      return true;
    }

    // Ki·ªÉm tra nh·∫Øc ƒë·∫øn username (kh√¥ng ph√¢n bi·ªát hoa th∆∞·ªùng)
    const usernameRegex = new RegExp(`\\b${this.ownerInfo.username}\\b`, "i");
    if (usernameRegex.test(content)) {
      return true;
    }

    // Ki·ªÉm tra c√°c t·ª´ kh√≥a li√™n quan ƒë·∫øn owner
    const ownerKeywords = [
      "owner",
      "ch·ªß s·ªü h·ªØu",
      "ng∆∞·ªùi s√°ng l·∫≠p",
      "creator",
      "developer",
      "dev",
      "ng∆∞·ªùi t·∫°o",
      "ng∆∞·ªùi ph√°t tri·ªÉn",
      "admin ch√≠nh",
      "boss",
    ];

    const contentLower = content.toLowerCase();
    return ownerKeywords.some((keyword) => contentLower.includes(keyword));
  }

  /**
   * T·∫°o tin nh·∫Øn khi owner ƒë∆∞·ª£c nh·∫Øc ƒë·∫øn
   * @param {string} context - Ng·ªØ c·∫£nh c·ªßa cu·ªôc tr√≤ chuy·ªán
   * @returns {Promise<string>}
   */
  async getOwnerMentionResponse(context = "") {
    if (!this.ownerInfo) {
      return "B·∫°n ƒëang n√≥i v·ªÅ ng∆∞·ªùi s√°ng l·∫≠p c·ªßa m√¨nh √†? üòä";
    }

    try {
      const prompt = prompts.owner.mentionResponse
        .replace("${ownerUsername}", this.ownerInfo.username)
        .replace("${ownerDisplayName}", this.ownerInfo.displayName)
        .replace("${context}", context);

      const response = await neuralNetworks.getCompletion(prompt);
      return response;
    } catch (error) {
      logger.error(
        "OWNER",
        "L·ªói khi t·∫°o ph·∫£n h·ªìi ƒë·ªông cho owner mention:",
        error
      );
      return "L·ªói khi t·∫°o ph·∫£n h·ªìi ƒë·ªông.";
    }
  }

  /**
   * T·∫°o l·ªùi ch√†o ƒë·∫∑c bi·ªát cho owner
   * @returns {Promise<string>}
   */
  async getOwnerGreeting() {
    if (!this.ownerInfo) {
      return "Ch√†o b·∫°n! üíñ H√¥m nay c√≥ g√¨ c·∫ßn m√¨nh gi√∫p kh√¥ng ·∫°? ‚ú®";
    }

    try {
      const prompt = prompts.owner.greeting.replace(
        "${ownerDisplayName}",
        this.ownerInfo.displayName
      );

      logger.info(
        "OWNER",
        `ƒêang t·∫°o l·ªùi ch√†o ƒë·∫∑c bi·ªát cho owner: ${this.ownerInfo.displayName}`
      );
      const response = await neuralNetworks.getCompletion(prompt);
      return response;
    } catch (error) {
      logger.error("OWNER", "L·ªói khi t·∫°o l·ªùi ch√†o ƒë·ªông cho owner:", error);
      // Fallback greeting n·∫øu API l·ªói
      return `Ch√†o ${this.ownerInfo.displayName}! üíñ R·∫•t vui khi g·∫∑p l·∫°i creator c·ªßa m√¨nh n√®~ ‚ú®`;
    }
  }

  /**
   * Refresh th√¥ng tin owner (g·ªçi l·∫°i API Discord)
   */
  async refreshOwnerInfo() {
    await this.loadOwnerInfo();
  }
}

// Export singleton instance
module.exports = new OwnerService();
