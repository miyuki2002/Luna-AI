const { EmbedBuilder, ActionRowBuilder, ButtonBuilder, ButtonStyle } = require('discord.js');
const ProfileDB = require('./profiledb');
const logger = require('../utils/logger.js');

class ConsentService {
  constructor() {
  }

  /**
   * Ki·ªÉm tra xem user ƒë√£ ƒë·ªìng √Ω s·ª≠ d·ª•ng d·ªãch v·ª• ch∆∞a
   * @param {string} userId - ID c·ªßa user
   * @returns {Promise<boolean>}
   */
  async hasUserConsented(userId) {
    try {
      const profile = await ProfileDB.getProfile(userId);
      if (!profile || !profile.data) {
        return false;
      }
      return profile.data.consent === true;
    } catch (error) {
      logger.error('CONSENT', `L·ªói khi ki·ªÉm tra consent cho user ${userId}:`, error);
      return false;
    }
  }

  /**
   * T·∫°o embed consent cho user m·ªõi
   * @param {Object} user - Discord user object
   * @returns {Object} - Embed v√† components
   */
  createConsentEmbed(user) {
    const embed = new EmbedBuilder()
      .setTitle('üéâ Ch√†o m·ª´ng b·∫°n ƒë·∫øn v·ªõi Luna AI!')
      .setDescription(
        `Xin ch√†o **${user.username}**! üëã\n\n` +
        `M√¨nh l√† **Luna**, AI assistant th√¥ng minh v√† d·ªÖ th∆∞∆°ng! ‚ú®\n\n` +
        `**ƒê·ªÉ s·ª≠ d·ª•ng d·ªãch v·ª•, b·∫°n c·∫ßn ƒë·ªìng √Ω v·ªõi c√°c ƒëi·ªÅu kho·∫£n sau:**\n\n` +
        `üìù **D·ªØ li·ªáu ƒë∆∞·ª£c thu th·∫≠p:**\n` +
        `> - Tin nh·∫Øn tr√≤ chuy·ªán (ƒë·ªÉ c·∫£i thi·ªán ch·∫•t l∆∞·ª£ng ph·∫£n h·ªìi)\n` +
        `> - Th√¥ng tin c∆° b·∫£n (username, ID)\n` +
        `> - D·ªØ li·ªáu XP v√† level (ƒë·ªÉ t√≠nh ƒëi·ªÉm kinh nghi·ªám)\n\n` +
        `üîí **Cam k·∫øt b·∫£o m·∫≠t:**\n` +
        `> - D·ªØ li·ªáu ƒë∆∞·ª£c m√£ h√≥a v√† b·∫£o m·∫≠t\n` +
        `> - Kh√¥ng chia s·∫ª v·ªõi b√™n th·ª© ba\n` +
        `> - C√≥ th·ªÉ x√≥a d·ªØ li·ªáu b·∫•t c·ª© l√∫c n√†o\n\n` +
        `**B·∫°n c√≥ ƒë·ªìng √Ω s·ª≠ d·ª•ng d·ªãch v·ª• Luna AI kh√¥ng?** üíñ`
      )
      .setColor(0x5865F2)
      .setThumbnail(user.displayAvatarURL({ dynamic: true, size: 512 }))
      .setFooter({ 
        text: 'Luna AI ‚Ä¢ Developed by s4ory', 
        iconURL: 'https://raw.githubusercontent.com/miyuki2002/Luna-AI/refs/heads/main/assets/luna-avatar.png' 
      })
      .setTimestamp();

    const row = new ActionRowBuilder()
      .addComponents(
        new ButtonBuilder()
          .setCustomId('consent_accept')
          .setLabel('Ch·∫•p thu·∫≠n')
          .setStyle(ButtonStyle.Success),
        new ButtonBuilder()
          .setCustomId('consent_decline')
          .setLabel('T·ª´ ch·ªëi')
          .setStyle(ButtonStyle.Danger)
      );

    return { embeds: [embed], components: [row] };
  }

  /**
   * X·ª≠ l√Ω khi user ch·∫•p thu·∫≠n
   * @param {Object} interaction - Discord interaction
   * @param {string} userId - ID c·ªßa user
   * @returns {Promise<void>}
   */
  async handleConsentAccept(interaction, userId) {
    try {
      await this.updateUserConsent(userId, true);

      const embed = new EmbedBuilder()
        .setTitle('üéâ C·∫£m ∆°n b·∫°n ƒë√£ tin t∆∞·ªüng Luna!')
        .setDescription(
          `**${interaction.user.username}** ƒë√£ ch·∫•p thu·∫≠n s·ª≠ d·ª•ng d·ªãch v·ª• c·ªßa Luna AI!\n\n` +
          `## **B√¢y gi·ªù b·∫°n c√≥ th·ªÉ:**\n` +
          `> - Tr√≤ chuy·ªán v·ªõi Luna b·∫±ng c√°ch tag @Luna\n` +
          `> - S·ª≠ d·ª•ng c√°c l·ªánh AI nh∆∞ \`/think\`, \`/image\`\n` +
          `> - Nh·∫≠n XP v√† level up khi ho·∫°t ƒë·ªông\n` +
          `> - T·∫≠n h∆∞·ªüng tr·∫£i nghi·ªám AI th√¥ng minh!\n\n` +
          `**Ch√∫c b·∫°n c√≥ nh·ªØng tr·∫£i nghi·ªám tuy·ªát v·ªùi v·ªõi Luna!**`
        )
        .setColor(0x00FF00)
        .setThumbnail(interaction.user.displayAvatarURL({ dynamic: true, size: 512 }))
        .setTimestamp();

      await interaction.update({
        embeds: [embed],
        components: []
      });


      logger.info('CONSENT', `User ${interaction.user.tag} (${userId}) ƒë√£ ch·∫•p thu·∫≠n s·ª≠ d·ª•ng d·ªãch v·ª•`);

    } catch (error) {
      logger.error('CONSENT', `L·ªói khi x·ª≠ l√Ω consent accept cho user ${userId}:`, error);
      await interaction.followUp({
        content: '‚ùå C√≥ l·ªói x·∫£y ra khi x·ª≠ l√Ω y√™u c·∫ßu c·ªßa b·∫°n. Vui l√≤ng th·ª≠ l·∫°i sau!',
        ephemeral: true
      });
    }
  }

  /**
   * X·ª≠ l√Ω khi user t·ª´ ch·ªëi
   * @param {Object} interaction - Discord interaction
   * @param {string} userId - ID c·ªßa user
   * @returns {Promise<void>}
   */
  async handleConsentDecline(interaction, userId) {
    try {

      const embed = new EmbedBuilder()
        .setTitle('üò¢ Luna hi·ªÉu v√† t√¥n tr·ªçng quy·∫øt ƒë·ªãnh c·ªßa b·∫°n!')
        .setDescription(
          `**${interaction.user.username}** ƒë√£ t·ª´ ch·ªëi s·ª≠ d·ª•ng d·ªãch v·ª• Luna AI.\n\n` +
          `üîí **D·ªØ li·ªáu c·ªßa b·∫°n:**\n` +
          `> - Kh√¥ng ƒë∆∞·ª£c l∆∞u tr·ªØ trong h·ªá th·ªëng\n` +
          `> - Ho√†n to√†n b·∫£o m·∫≠t v√† ri√™ng t∆∞\n\n` +
          `üíñ **Luna v·∫´n s·∫µn s√†ng gi√∫p ƒë·ª° b·∫°n:**\n` +
          `> - B·∫°n c√≥ th·ªÉ thay ƒë·ªïi quy·∫øt ƒë·ªãnh b·∫•t c·ª© l√∫c n√†o\n` +
          `> - Ch·ªâ c·∫ßn tag @Luna ho·∫∑c s·ª≠ d·ª•ng l·ªánh ƒë·ªÉ b·∫Øt ƒë·∫ßu l·∫°i\n\n` +
          `**C·∫£m ∆°n b·∫°n ƒë√£ d√†nh th·ªùi gian!**`
        )
        .setColor(0xFF0000)
        .setThumbnail(interaction.user.displayAvatarURL({ dynamic: true, size: 512 }))
        .setTimestamp();

      await interaction.update({
        embeds: [embed],
        components: []
      });

      logger.info('CONSENT', `User ${interaction.user.tag} (${userId}) ƒë√£ t·ª´ ch·ªëi s·ª≠ d·ª•ng d·ªãch v·ª•`);

    } catch (error) {
      logger.error('CONSENT', `L·ªói khi x·ª≠ l√Ω consent decline cho user ${userId}:`, error);
      await interaction.followUp({
        content: '‚ùå C√≥ l·ªói x·∫£y ra khi x·ª≠ l√Ω y√™u c·∫ßu c·ªßa b·∫°n. Vui l√≤ng th·ª≠ l·∫°i sau!',
        ephemeral: true
      });
    }
  }

  /**
   * C·∫≠p nh·∫≠t consent c·ªßa user trong database
   * @param {string} userId - ID c·ªßa user
   * @param {boolean} consented - Tr·∫°ng th√°i consent
   * @returns {Promise<void>}
   */
  async updateUserConsent(userId, consented) {
    try {
      const profileCollection = await ProfileDB.getProfileCollection();
      await profileCollection.updateOne(
        { _id: userId },
        { 
          $set: { 
            'data.consent': consented,
            'data.consentDate': new Date(),
            'data.consentVersion': '1.0'
          } 
        },
        { upsert: true }
      );
    } catch (error) {
      logger.error('CONSENT', `L·ªói khi c·∫≠p nh·∫≠t consent cho user ${userId}:`, error);
      throw error;
    }
  }

}

module.exports = new ConsentService();
