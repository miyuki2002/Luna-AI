const { SlashCommandBuilder, PermissionFlagsBits, EmbedBuilder } = require('discord.js');
const ConversationService = require('../../services/ConversationService.js');
const { logModAction, formatDuration } = require('../../utils/modUtils.js');
const { sendModLog, createModActionEmbed } = require('../../utils/modLogUtils.js');
const { handlePermissionError } = require('../../utils/permissionUtils');
const logger = require('../../utils/logger.js');

module.exports = {
  data: new SlashCommandBuilder()
    .setName('mute')
    .setDescription('Mute (timeout) m·ªôt th√†nh vi√™n')
    .addUserOption(option =>
      option.setName('user')
        .setDescription('Th√†nh vi√™n c·∫ßn mute')
        .setRequired(true))
    .addIntegerOption(option =>
      option.setName('duration')
        .setDescription('Th·ªùi gian mute (ph√∫t)')
        .setRequired(true)
        .setMinValue(1)
        .setMaxValue(40320))
    .addStringOption(option =>
      option.setName('reason')
        .setDescription('L√Ω do mute')
        .setRequired(false))
    .setDefaultMemberPermissions(PermissionFlagsBits.ModerateMembers),

  async execute(interaction) {
    if (!interaction.member.permissions.has(PermissionFlagsBits.ModerateMembers)) {
      return interaction.reply({
        content: 'B·∫°n kh√¥ng c√≥ quy·ªÅn mute th√†nh vi√™n!',
        ephemeral: true
      });
    }

    const targetUser = interaction.options.getUser('user');
    const targetMember = interaction.options.getMember('user');
    const duration = interaction.options.getInteger('duration'); // Th·ªùi gian t√≠nh b·∫±ng ph√∫t
    const reason = interaction.options.getString('reason') || 'Kh√¥ng c√≥ l√Ω do ƒë∆∞·ª£c cung c·∫•p';

    if (!targetMember) {
      return interaction.reply({
        content: 'Kh√¥ng th·ªÉ t√¨m th·∫•y th√†nh vi√™n n√†y trong server.',
        ephemeral: true
      });
    }

    if (!targetMember.moderatable) {
      return interaction.reply({
        content: 'T√¥i kh√¥ng th·ªÉ mute th√†nh vi√™n n√†y. C√≥ th·ªÉ h·ªç c√≥ quy·ªÅn cao h∆°n t√¥i ho·∫∑c b·∫°n.',
        ephemeral: true
      });
    }

    await interaction.deferReply();

    try {
      const durationMs = duration * 60 * 1000;

      const endTime = new Date(Date.now() + durationMs);

      const formattedDuration = formatDuration(duration);

      const prompts = require('../../config/prompts.js');
      const prompt = prompts.moderation.mute
        .replace('${username}', targetUser.username)
        .replace('${duration}', formattedDuration)
        .replace('${reason}', reason);

      const aiResponse = await ConversationService.getCompletion(prompt);

      const muteEmbed = new EmbedBuilder()
        .setColor(0xFFA500)
        .setTitle(`üîá Th√†nh vi√™n ƒë√£ b·ªã mute`)
        .setDescription(aiResponse)
        .addFields(
          { name: 'Th√†nh vi√™n', value: `${targetUser.tag}`, inline: true },
          { name: 'ID', value: targetUser.id, inline: true },
          { name: 'Th·ªùi gian', value: formattedDuration, inline: true },
          { name: 'K·∫øt th√∫c l√∫c', value: `<t:${Math.floor(endTime.getTime() / 1000)}:F>`, inline: true },
          { name: 'L√Ω do', value: reason, inline: false }
        )
        .setFooter({ text: `Muted by ${interaction.user.tag}` })
        .setTimestamp();

      await targetMember.timeout(durationMs, reason);

      await logModAction({
        guildId: interaction.guild.id,
        targetId: targetUser.id,
        moderatorId: interaction.user.id,
        action: 'mute',
        reason: reason,
        duration: duration
      });

      try {
        await interaction.editReply({ embeds: [muteEmbed] });
      } catch (error) {
        if (error.code === 50013 || error.message.includes('permission')) {
          await handlePermissionError(interaction, 'embedLinks', interaction.user.username, 'editReply');
        } else {
          throw error;
        }
      }

      const logEmbed = createModActionEmbed({
        title: `üîá Th√†nh vi√™n ƒë√£ b·ªã mute`,
        description: `${targetUser.tag} ƒë√£ b·ªã mute trong ${formattedDuration}.`,
        color: 0xFFA500,
        fields: [
          { name: 'Th√†nh vi√™n', value: `${targetUser.tag} (<@${targetUser.id}>)`, inline: true },
          { name: 'ID', value: targetUser.id, inline: true },
          { name: 'Ng∆∞·ªùi mute', value: `${interaction.user.tag} (<@${interaction.user.id}>)`, inline: true },
          { name: 'Th·ªùi gian mute', value: formattedDuration, inline: true },
          { name: 'K·∫øt th√∫c l√∫c', value: `<t:${Math.floor(endTime.getTime() / 1000)}:F>`, inline: true },
          { name: 'L√Ω do', value: reason, inline: false }
        ],
        footer: `Server: ${interaction.guild.name}`
      });

      await sendModLog(interaction.guild, logEmbed, true);

      try {
        const dmEmbed = new EmbedBuilder()
          .setColor(0xFFA500)
          .setTitle(`B·∫°n ƒë√£ b·ªã mute trong ${interaction.guild.name}`)
          .setDescription(`**L√Ω do:** ${reason}\n**Th·ªùi gian:** ${formattedDuration}\n**K·∫øt th√∫c l√∫c:** <t:${Math.floor(endTime.getTime() / 1000)}:F>`)
          .setFooter({ text: `Trong th·ªùi gian mute, b·∫°n kh√¥ng th·ªÉ g·ª≠i tin nh·∫Øn ho·∫∑c tham gia voice chat.` })
          .setTimestamp();

        await targetUser.send({ embeds: [dmEmbed] });
      } catch (error) {
        logger.error('MODERATION', `Kh√¥ng th·ªÉ g·ª≠i DM cho ${targetUser.tag}`);
      }

    } catch (error) {
      logger.error('MODERATION', 'L·ªói khi mute th√†nh vi√™n:', error);
      await interaction.editReply({
        content: `ƒê√£ x·∫£y ra l·ªói khi mute ${targetUser.tag}: ${error.message}`,
        ephemeral: true
      });
    }
  },
};
