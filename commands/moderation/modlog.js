const { SlashCommandBuilder, PermissionFlagsBits, EmbedBuilder } = require('discord.js');
const mongoClient = require('../../services/mongoClient.js');

module.exports = {
  data: new SlashCommandBuilder()
    .setName('modlog')
    .setDescription('Xem nh·∫≠t k√Ω h√†nh ƒë·ªông moderation')
    .addUserOption(option => 
      option.setName('user')
        .setDescription('L·ªçc theo th√†nh vi√™n (t√πy ch·ªçn)')
        .setRequired(false))
    .addStringOption(option => 
      option.setName('action')
        .setDescription('L·ªçc theo lo·∫°i h√†nh ƒë·ªông (t√πy ch·ªçn)')
        .setRequired(false)
        .addChoices(
          { name: 'Ban', value: 'ban' },
          { name: 'Unban', value: 'unban' },
          { name: 'Kick', value: 'kick' },
          { name: 'Mute', value: 'mute' },
          { name: 'Unmute', value: 'unmute' },
          { name: 'Warn', value: 'warn' },
          { name: 'Clear Warnings', value: 'clearwarnings' }
        ))
    .addIntegerOption(option => 
      option.setName('limit')
        .setDescription('S·ªë l∆∞·ª£ng h√†nh ƒë·ªông hi·ªÉn th·ªã (m·∫∑c ƒë·ªãnh: 10)')
        .setRequired(false)
        .setMinValue(1)
        .setMaxValue(25))
    .setDefaultMemberPermissions(PermissionFlagsBits.ModerateMembers),

  async execute(interaction) {
    // Ki·ªÉm tra quy·ªÅn
    if (!interaction.member.permissions.has(PermissionFlagsBits.ModerateMembers)) {
      return interaction.reply({ 
        content: 'B·∫°n kh√¥ng c√≥ quy·ªÅn xem nh·∫≠t k√Ω moderation!', 
        ephemeral: true 
      });
    }

    const targetUser = interaction.options.getUser('user');
    const actionType = interaction.options.getString('action');
    const limit = interaction.options.getInteger('limit') || 10;

    await interaction.deferReply();
    
    try {
      const db = mongoClient.getDb();
      
      // T·∫°o collection modlog n·∫øu ch∆∞a t·ªìn t·∫°i
      try {
        await db.createCollection('modlog');
      } catch (error) {
        // B·ªè qua l·ªói n·∫øu collection ƒë√£ t·ªìn t·∫°i
      }
      
      // T·∫°o filter d·ª±a tr√™n c√°c t√πy ch·ªçn
      const filter = { guildId: interaction.guild.id };
      
      if (targetUser) {
        filter.targetId = targetUser.id;
      }
      
      if (actionType) {
        filter.action = actionType;
      }
      
      // L·∫•y d·ªØ li·ªáu t·ª´ c∆° s·ªü d·ªØ li·ªáu
      const logs = await db.collection('modlog')
        .find(filter)
        .sort({ timestamp: -1 })
        .limit(limit)
        .toArray();
      
      if (logs.length === 0) {
        return interaction.editReply({
          content: 'Kh√¥ng t√¨m th·∫•y nh·∫≠t k√Ω moderation n√†o ph√π h·ª£p v·ªõi b·ªô l·ªçc.',
          ephemeral: false
        });
      }
      
      // T·∫°o embed th√¥ng b√°o
      const logEmbed = new EmbedBuilder()
        .setColor(0x3498DB)
        .setTitle('üìã Nh·∫≠t k√Ω Moderation')
        .setDescription(`Hi·ªÉn th·ªã ${logs.length} h√†nh ƒë·ªông moderation g·∫ßn nh·∫•t${targetUser ? ` cho ${targetUser.tag}` : ''}${actionType ? ` (lo·∫°i: ${actionType})` : ''}.`)
        .setFooter({ text: `Server: ${interaction.guild.name}` })
        .setTimestamp();

      // Th√™m c√°c h√†nh ƒë·ªông v√†o embed
      for (const log of logs) {
        const date = new Date(log.timestamp).toLocaleDateString('vi-VN');
        const time = new Date(log.timestamp).toLocaleTimeString('vi-VN');
        
        // L·∫•y th√¥ng tin ng∆∞·ªùi th·ª±c hi·ªán v√† m·ª•c ti√™u
        let moderator = 'Kh√¥ng r√µ';
        let target = 'Kh√¥ng r√µ';
        
        try {
          const modUser = await interaction.client.users.fetch(log.moderatorId);
          moderator = modUser.tag;
        } catch (error) {
          moderator = `Kh√¥ng r√µ (ID: ${log.moderatorId})`;
        }
        
        try {
          const targetUser = await interaction.client.users.fetch(log.targetId);
          target = targetUser.tag;
        } catch (error) {
          target = `Kh√¥ng r√µ (ID: ${log.targetId})`;
        }
        
        // ƒê·ªãnh d·∫°ng t√™n h√†nh ƒë·ªông
        const actionName = {
          'ban': 'üî® Ban',
          'unban': 'üîì Unban',
          'kick': 'üë¢ Kick',
          'mute': 'üîá Mute',
          'unmute': 'üîä Unmute',
          'warn': '‚ö†Ô∏è Warn',
          'clearwarnings': 'üßπ Clear Warnings'
        }[log.action] || log.action;
        
        // Th√™m th√¥ng tin b·ªï sung d·ª±a tr√™n lo·∫°i h√†nh ƒë·ªông
        let additionalInfo = '';
        if (log.action === 'mute' && log.duration) {
          additionalInfo = `\n**Th·ªùi gian:** ${log.duration} ph√∫t`;
        } else if (log.action === 'clearwarnings' && log.count) {
          additionalInfo = `\n**S·ªë c·∫£nh c√°o ƒë√£ x√≥a:** ${log.count}`;
        }
        
        logEmbed.addFields({
          name: `${actionName} - ${date} ${time}`,
          value: `**Ng∆∞·ªùi th·ª±c hi·ªán:** ${moderator}\n**M·ª•c ti√™u:** ${target}\n**L√Ω do:** ${log.reason || 'Kh√¥ng c√≥ l√Ω do'}${additionalInfo}`
        });
      }

      // G·ª≠i th√¥ng b√°o
      await interaction.editReply({ embeds: [logEmbed] });
      
    } catch (error) {
      console.error('L·ªói khi xem nh·∫≠t k√Ω moderation:', error);
      await interaction.editReply({ 
        content: `ƒê√£ x·∫£y ra l·ªói khi xem nh·∫≠t k√Ω moderation: ${error.message}`, 
        ephemeral: true 
      });
    }
  },
};
