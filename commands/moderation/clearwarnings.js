const { SlashCommandBuilder, PermissionFlagsBits, EmbedBuilder } = require('discord.js');
const mongoClient = require('../../services/mongoClient.js');
const NeuralNetworks = require('../../services/NeuralNetworks.js');

module.exports = {
  data: new SlashCommandBuilder()
    .setName('clearwarnings')
    .setDescription('X√≥a c·∫£nh c√°o c·ªßa m·ªôt th√†nh vi√™n')
    .addUserOption(option => 
      option.setName('user')
        .setDescription('Th√†nh vi√™n c·∫ßn x√≥a c·∫£nh c√°o')
        .setRequired(true))
    .addStringOption(option => 
      option.setName('type')
        .setDescription('Lo·∫°i x√≥a c·∫£nh c√°o')
        .setRequired(true)
        .addChoices(
          { name: 'T·∫•t c·∫£', value: 'all' },
          { name: 'M·ªõi nh·∫•t', value: 'latest' }
        ))
    .addStringOption(option => 
      option.setName('reason')
        .setDescription('L√Ω do x√≥a c·∫£nh c√°o')
        .setRequired(false))
    .setDefaultMemberPermissions(PermissionFlagsBits.ModerateMembers),

  async execute(interaction) {
    // Ki·ªÉm tra quy·ªÅn
    if (!interaction.member.permissions.has(PermissionFlagsBits.ModerateMembers)) {
      return interaction.reply({ 
        content: 'B·∫°n kh√¥ng c√≥ quy·ªÅn x√≥a c·∫£nh c√°o c·ªßa th√†nh vi√™n!', 
        ephemeral: true 
      });
    }

    const targetUser = interaction.options.getUser('user');
    const type = interaction.options.getString('type');
    const reason = interaction.options.getString('reason') || 'Kh√¥ng c√≥ l√Ω do ƒë∆∞·ª£c cung c·∫•p';

    await interaction.deferReply();
    
    try {
      const db = mongoClient.getDb();
      
      // Ki·ªÉm tra xem th√†nh vi√™n c√≥ c·∫£nh c√°o kh√¥ng
      const warningCount = await db.collection('warnings').countDocuments({
        userId: targetUser.id,
        guildId: interaction.guild.id
      });
      
      if (warningCount === 0) {
        return interaction.editReply({
          content: `${targetUser.tag} kh√¥ng c√≥ c·∫£nh c√°o n√†o trong server n√†y.`,
          ephemeral: false
        });
      }
      
      let deletedCount = 0;
      
      if (type === 'all') {
        // X√≥a t·∫•t c·∫£ c·∫£nh c√°o
        const result = await db.collection('warnings').deleteMany({
          userId: targetUser.id,
          guildId: interaction.guild.id
        });
        
        deletedCount = result.deletedCount;
      } else if (type === 'latest') {
        // X√≥a c·∫£nh c√°o m·ªõi nh·∫•t
        const latestWarning = await db.collection('warnings')
          .findOne({
            userId: targetUser.id,
            guildId: interaction.guild.id
          }, {
            sort: { timestamp: -1 }
          });
          
        if (latestWarning) {
          await db.collection('warnings').deleteOne({ _id: latestWarning._id });
          deletedCount = 1;
        }
      }
      
      // S·ª≠ d·ª•ng NeuralNetworks ƒë·ªÉ t·∫°o th√¥ng b√°o
      const prompt = `T·∫°o m·ªôt th√¥ng b√°o ng·∫Øn g·ªçn, t√≠ch c·ª±c v·ªÅ vi·ªác x√≥a ${type === 'all' ? 't·∫•t c·∫£' : 'c·∫£nh c√°o m·ªõi nh·∫•t'} c·ªßa th√†nh vi√™n ${targetUser.username} v·ªõi l√Ω do: "${reason}". ƒê√£ x√≥a ${deletedCount} c·∫£nh c√°o. Th√¥ng b√°o n√™n c√≥ gi·ªçng ƒëi·ªáu c·ªßa m·ªôt mod c√¥ng b·∫±ng v√† khoan dung, kh√¥ng qu√° 2 c√¢u. C√≥ th·ªÉ th√™m 1 emoji ph√π h·ª£p.`;
      
      const aiResponse = await NeuralNetworks.getCompletion(prompt);
      
      // T·∫°o embed th√¥ng b√°o
      const clearEmbed = new EmbedBuilder()
        .setColor(0x00FF00)
        .setTitle(`üßπ ƒê√£ x√≥a c·∫£nh c√°o`)
        .setDescription(aiResponse)
        .addFields(
          { name: 'Th√†nh vi√™n', value: `${targetUser.tag}`, inline: true },
          { name: 'ID', value: targetUser.id, inline: true },
          { name: 'S·ªë c·∫£nh c√°o ƒë√£ x√≥a', value: `${deletedCount}`, inline: true },
          { name: 'Lo·∫°i x√≥a', value: type === 'all' ? 'T·∫•t c·∫£' : 'M·ªõi nh·∫•t', inline: true },
          { name: 'L√Ω do', value: reason, inline: false }
        )
        .setFooter({ text: `Cleared by ${interaction.user.tag}` })
        .setTimestamp();

      // G·ª≠i th√¥ng b√°o
      await interaction.editReply({ embeds: [clearEmbed] });
      
      // G·ª≠i DM cho ng∆∞·ªùi ƒë∆∞·ª£c x√≥a c·∫£nh c√°o (n·∫øu c√≥ th·ªÉ)
      try {
        const dmEmbed = new EmbedBuilder()
          .setColor(0x00FF00)
          .setTitle(`C·∫£nh c√°o c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c x√≥a trong ${interaction.guild.name}`)
          .setDescription(`**Lo·∫°i x√≥a:** ${type === 'all' ? 'T·∫•t c·∫£ c·∫£nh c√°o' : 'C·∫£nh c√°o m·ªõi nh·∫•t'}\n**S·ªë c·∫£nh c√°o ƒë√£ x√≥a:** ${deletedCount}\n**L√Ω do:** ${reason}`)
          .setFooter({ text: `X√≥a b·ªüi ${interaction.user.tag}` })
          .setTimestamp();
          
        await targetUser.send({ embeds: [dmEmbed] });
      } catch (error) {
        console.log(`Kh√¥ng th·ªÉ g·ª≠i DM cho ${targetUser.tag}`);
      }
      
    } catch (error) {
      console.error('L·ªói khi x√≥a c·∫£nh c√°o c·ªßa th√†nh vi√™n:', error);
      await interaction.editReply({ 
        content: `ƒê√£ x·∫£y ra l·ªói khi x√≥a c·∫£nh c√°o c·ªßa ${targetUser.tag}: ${error.message}`, 
        ephemeral: true 
      });
    }
  },
};
