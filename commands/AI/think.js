const { SlashCommandBuilder } = require('discord.js');
const AICore = require('../../services/AICore');
const logger = require('../../utils/logger.js');
const { splitMessageRespectWords } = require('../../handlers/messageHandler');

module.exports = {
  data: new SlashCommandBuilder()
    .setName('think')
    .setDescription('Hi·ªÉn th·ªã qu√° tr√¨nh suy nghƒ© c·ªßa AI khi tr·∫£ l·ªùi c√¢u h·ªèi c·ªßa b·∫°n')
    .addStringOption(option =>
      option.setName('prompt')
        .setDescription('Nh·∫≠p c√¢u h·ªèi ho·∫∑c v·∫•n ƒë·ªÅ b·∫°n mu·ªën AI ph√¢n t√≠ch')
        .setRequired(true)),

  async execute(interaction) {
    const prompt = interaction.options.getString('prompt');

    await interaction.deferReply();

    try {
      // Ki·ªÉm tra token limit tr∆∞·ªõc khi x·ª≠ l√Ω
      const MessageService = require('../../services/TokenService.js');
      const userId = interaction.user.id;
      const messageCheck = await MessageService.canUseMessages(userId, 1);

      if (!messageCheck.allowed) {
        const roleNames = {
          user: 'Ng∆∞·ªùi d√πng',
          helper: 'Helper',
          admin: 'Admin',
          owner: 'Owner'
        };
        
        await interaction.editReply(
          `**Gi·ªõi h·∫°n L∆∞·ª£t nh·∫Øn tin**\n\n` +
          `B·∫°n ƒë√£ s·ª≠ d·ª•ng h·∫øt gi·ªõi h·∫°n l∆∞·ª£t nh·∫Øn tin h√†ng ng√†y!\n\n` +
          `**Th√¥ng tin:**\n` +
          `‚Ä¢ Vai tr√≤: ${roleNames[messageCheck.role] || messageCheck.role}\n` +
          `‚Ä¢ ƒê√£ s·ª≠ d·ª•ng: ${messageCheck.current.toLocaleString()} l∆∞·ª£t\n` +
          `‚Ä¢ Gi·ªõi h·∫°n: ${messageCheck.limit.toLocaleString()} l∆∞·ª£t/ng√†y\n` +
          `‚Ä¢ C√≤n l·∫°i: ${messageCheck.remaining.toLocaleString()} l∆∞·ª£t\n\n` +
          `Gi·ªõi h·∫°n s·∫Ω ƒë∆∞·ª£c reset v√†o ng√†y mai. Vui l√≤ng quay l·∫°i sau!`
        );
        return;
      }

      const result = await AICore.getThinkingResponse(prompt);
      let response = result.content;

      // Ghi nh·∫≠n message usage
      if (result.usage && result.usage.total_tokens) {
        await MessageService.recordMessageUsage(userId, 1, 'think');
      }

      if (response.length <= 2000) {
        await interaction.editReply({
          content: response
        });
      } else {
        const chunks = splitMessageRespectWords(response, 2000);

        await interaction.editReply({
          content: chunks[0]
        });

        for (let i = 1; i < chunks.length; i++) {
          await interaction.followUp({
            content: chunks[i]
          });
        }
      }
    } catch (error) {
      logger.error('COMMAND', 'L·ªói khi x·ª≠ l√Ω l·ªánh /think:', error);

      let errorMsg = 'üí≠ Kh√¥ng th·ªÉ ph√¢n t√≠ch c√¢u h·ªèi n√†y l√∫c n√†y.';
      
      if (error.message.includes('Kh√¥ng c√≥ API provider n√†o ƒë∆∞·ª£c c·∫•u h√¨nh')) {
        errorMsg += '\n\nH·ªá th·ªëng AI hi·ªán t·∫°i kh√¥ng kh·∫£ d·ª•ng.';
      } else if (error.message.includes('T·∫•t c·∫£ providers ƒë√£ th·∫•t b·∫°i')) {
        errorMsg += '\n\nT·∫•t c·∫£ nh√† cung c·∫•p AI ƒë·ªÅu kh√¥ng kh·∫£ d·ª•ng.';
      } else if (error.message.includes('timeout')) {
        errorMsg += '\n\nY√™u c·∫ßu b·ªã timeout. Vui l√≤ng th·ª≠ l·∫°i.';
      } else {
        errorMsg += '\n\nVui l√≤ng th·ª≠ l·∫°i sau ho·∫∑c li√™n h·ªá admin ƒë·ªÉ ƒë∆∞·ª£c h·ªó tr·ª£.';
      }
      
      errorMsg += '\n\nG·ª£i √Ω: Th·ª≠ s·ª≠ d·ª•ng l·ªánh `@Luna` thay th·∫ø!';

      await interaction.editReply(errorMsg);
    }
  }
};

